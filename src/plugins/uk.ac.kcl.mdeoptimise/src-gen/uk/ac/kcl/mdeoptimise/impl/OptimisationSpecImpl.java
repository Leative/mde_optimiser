/**
 * generated by Xtext 2.14.0
 */
package uk.ac.kcl.mdeoptimise.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.mdeoptimise.AlgorithmParameters;
import uk.ac.kcl.mdeoptimise.AlgorithmVariation;
import uk.ac.kcl.mdeoptimise.MdeoptimisePackage;
import uk.ac.kcl.mdeoptimise.OptimisationSpec;
import uk.ac.kcl.mdeoptimise.TerminationConditionParameters;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Optimisation Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.OptimisationSpecImpl#getAlgorithmFactory <em>Algorithm Factory</em>}</li>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.OptimisationSpecImpl#getAlgorithmName <em>Algorithm Name</em>}</li>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.OptimisationSpecImpl#getAlgorithmVariation <em>Algorithm Variation</em>}</li>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.OptimisationSpecImpl#getAlgorithmParameters <em>Algorithm Parameters</em>}</li>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.OptimisationSpecImpl#getTerminationCondition <em>Termination Condition</em>}</li>
 *   <li>{@link uk.ac.kcl.mdeoptimise.impl.OptimisationSpecImpl#getAlgorithmBatches <em>Algorithm Batches</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OptimisationSpecImpl extends MinimalEObjectImpl.Container implements OptimisationSpec
{
  /**
   * The default value of the '{@link #getAlgorithmFactory() <em>Algorithm Factory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmFactory()
   * @generated
   * @ordered
   */
  protected static final String ALGORITHM_FACTORY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAlgorithmFactory() <em>Algorithm Factory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmFactory()
   * @generated
   * @ordered
   */
  protected String algorithmFactory = ALGORITHM_FACTORY_EDEFAULT;

  /**
   * The default value of the '{@link #getAlgorithmName() <em>Algorithm Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmName()
   * @generated
   * @ordered
   */
  protected static final String ALGORITHM_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAlgorithmName() <em>Algorithm Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmName()
   * @generated
   * @ordered
   */
  protected String algorithmName = ALGORITHM_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAlgorithmVariation() <em>Algorithm Variation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmVariation()
   * @generated
   * @ordered
   */
  protected AlgorithmVariation algorithmVariation;

  /**
   * The cached value of the '{@link #getAlgorithmParameters() <em>Algorithm Parameters</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmParameters()
   * @generated
   * @ordered
   */
  protected AlgorithmParameters algorithmParameters;

  /**
   * The cached value of the '{@link #getTerminationCondition() <em>Termination Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerminationCondition()
   * @generated
   * @ordered
   */
  protected TerminationConditionParameters terminationCondition;

  /**
   * The default value of the '{@link #getAlgorithmBatches() <em>Algorithm Batches</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmBatches()
   * @generated
   * @ordered
   */
  protected static final int ALGORITHM_BATCHES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getAlgorithmBatches() <em>Algorithm Batches</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithmBatches()
   * @generated
   * @ordered
   */
  protected int algorithmBatches = ALGORITHM_BATCHES_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OptimisationSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MdeoptimisePackage.Literals.OPTIMISATION_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAlgorithmFactory()
  {
    return algorithmFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgorithmFactory(String newAlgorithmFactory)
  {
    String oldAlgorithmFactory = algorithmFactory;
    algorithmFactory = newAlgorithmFactory;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_FACTORY, oldAlgorithmFactory, algorithmFactory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAlgorithmName()
  {
    return algorithmName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgorithmName(String newAlgorithmName)
  {
    String oldAlgorithmName = algorithmName;
    algorithmName = newAlgorithmName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_NAME, oldAlgorithmName, algorithmName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlgorithmVariation getAlgorithmVariation()
  {
    return algorithmVariation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlgorithmVariation(AlgorithmVariation newAlgorithmVariation, NotificationChain msgs)
  {
    AlgorithmVariation oldAlgorithmVariation = algorithmVariation;
    algorithmVariation = newAlgorithmVariation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION, oldAlgorithmVariation, newAlgorithmVariation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgorithmVariation(AlgorithmVariation newAlgorithmVariation)
  {
    if (newAlgorithmVariation != algorithmVariation)
    {
      NotificationChain msgs = null;
      if (algorithmVariation != null)
        msgs = ((InternalEObject)algorithmVariation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION, null, msgs);
      if (newAlgorithmVariation != null)
        msgs = ((InternalEObject)newAlgorithmVariation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION, null, msgs);
      msgs = basicSetAlgorithmVariation(newAlgorithmVariation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION, newAlgorithmVariation, newAlgorithmVariation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlgorithmParameters getAlgorithmParameters()
  {
    return algorithmParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlgorithmParameters(AlgorithmParameters newAlgorithmParameters, NotificationChain msgs)
  {
    AlgorithmParameters oldAlgorithmParameters = algorithmParameters;
    algorithmParameters = newAlgorithmParameters;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS, oldAlgorithmParameters, newAlgorithmParameters);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgorithmParameters(AlgorithmParameters newAlgorithmParameters)
  {
    if (newAlgorithmParameters != algorithmParameters)
    {
      NotificationChain msgs = null;
      if (algorithmParameters != null)
        msgs = ((InternalEObject)algorithmParameters).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS, null, msgs);
      if (newAlgorithmParameters != null)
        msgs = ((InternalEObject)newAlgorithmParameters).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS, null, msgs);
      msgs = basicSetAlgorithmParameters(newAlgorithmParameters, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS, newAlgorithmParameters, newAlgorithmParameters));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TerminationConditionParameters getTerminationCondition()
  {
    return terminationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerminationCondition(TerminationConditionParameters newTerminationCondition, NotificationChain msgs)
  {
    TerminationConditionParameters oldTerminationCondition = terminationCondition;
    terminationCondition = newTerminationCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION, oldTerminationCondition, newTerminationCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTerminationCondition(TerminationConditionParameters newTerminationCondition)
  {
    if (newTerminationCondition != terminationCondition)
    {
      NotificationChain msgs = null;
      if (terminationCondition != null)
        msgs = ((InternalEObject)terminationCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION, null, msgs);
      if (newTerminationCondition != null)
        msgs = ((InternalEObject)newTerminationCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION, null, msgs);
      msgs = basicSetTerminationCondition(newTerminationCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION, newTerminationCondition, newTerminationCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getAlgorithmBatches()
  {
    return algorithmBatches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlgorithmBatches(int newAlgorithmBatches)
  {
    int oldAlgorithmBatches = algorithmBatches;
    algorithmBatches = newAlgorithmBatches;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_BATCHES, oldAlgorithmBatches, algorithmBatches));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION:
        return basicSetAlgorithmVariation(null, msgs);
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS:
        return basicSetAlgorithmParameters(null, msgs);
      case MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION:
        return basicSetTerminationCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_FACTORY:
        return getAlgorithmFactory();
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_NAME:
        return getAlgorithmName();
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION:
        return getAlgorithmVariation();
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS:
        return getAlgorithmParameters();
      case MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION:
        return getTerminationCondition();
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_BATCHES:
        return getAlgorithmBatches();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_FACTORY:
        setAlgorithmFactory((String)newValue);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_NAME:
        setAlgorithmName((String)newValue);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION:
        setAlgorithmVariation((AlgorithmVariation)newValue);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS:
        setAlgorithmParameters((AlgorithmParameters)newValue);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION:
        setTerminationCondition((TerminationConditionParameters)newValue);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_BATCHES:
        setAlgorithmBatches((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_FACTORY:
        setAlgorithmFactory(ALGORITHM_FACTORY_EDEFAULT);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_NAME:
        setAlgorithmName(ALGORITHM_NAME_EDEFAULT);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION:
        setAlgorithmVariation((AlgorithmVariation)null);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS:
        setAlgorithmParameters((AlgorithmParameters)null);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION:
        setTerminationCondition((TerminationConditionParameters)null);
        return;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_BATCHES:
        setAlgorithmBatches(ALGORITHM_BATCHES_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_FACTORY:
        return ALGORITHM_FACTORY_EDEFAULT == null ? algorithmFactory != null : !ALGORITHM_FACTORY_EDEFAULT.equals(algorithmFactory);
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_NAME:
        return ALGORITHM_NAME_EDEFAULT == null ? algorithmName != null : !ALGORITHM_NAME_EDEFAULT.equals(algorithmName);
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_VARIATION:
        return algorithmVariation != null;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_PARAMETERS:
        return algorithmParameters != null;
      case MdeoptimisePackage.OPTIMISATION_SPEC__TERMINATION_CONDITION:
        return terminationCondition != null;
      case MdeoptimisePackage.OPTIMISATION_SPEC__ALGORITHM_BATCHES:
        return algorithmBatches != ALGORITHM_BATCHES_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (algorithmFactory: ");
    result.append(algorithmFactory);
    result.append(", algorithmName: ");
    result.append(algorithmName);
    result.append(", algorithmBatches: ");
    result.append(algorithmBatches);
    result.append(')');
    return result.toString();
  }

} //OptimisationSpecImpl
