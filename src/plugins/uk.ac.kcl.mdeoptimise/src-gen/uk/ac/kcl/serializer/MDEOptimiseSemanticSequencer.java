/*
 * generated by Xtext 2.10.0
 */
package uk.ac.kcl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.mdeoptimise.AlgorithmVariation;
import uk.ac.kcl.mdeoptimise.BasepathSpec;
import uk.ac.kcl.mdeoptimise.ConstraintInterpreterSpec;
import uk.ac.kcl.mdeoptimise.EvolverParameter;
import uk.ac.kcl.mdeoptimise.EvolverSpec;
import uk.ac.kcl.mdeoptimise.MdeoptimisePackage;
import uk.ac.kcl.mdeoptimise.MetaModelSpec;
import uk.ac.kcl.mdeoptimise.ModelPathSpec;
import uk.ac.kcl.mdeoptimise.ObjectiveInterpreterSpec;
import uk.ac.kcl.mdeoptimise.Optimisation;
import uk.ac.kcl.mdeoptimise.OptimisationSpec;
import uk.ac.kcl.mdeoptimise.ParameterFunction;
import uk.ac.kcl.mdeoptimise.ProbabilityVariation;
import uk.ac.kcl.services.MDEOptimiseGrammarAccess;

@SuppressWarnings("all")
public class MDEOptimiseSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MDEOptimiseGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MdeoptimisePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MdeoptimisePackage.ALGORITHM_VARIATION:
				sequence_AlgorithmVariation(context, (AlgorithmVariation) semanticObject); 
				return; 
			case MdeoptimisePackage.BASEPATH_SPEC:
				sequence_BasepathSpec(context, (BasepathSpec) semanticObject); 
				return; 
			case MdeoptimisePackage.CONSTRAINT_INTERPRETER_SPEC:
				sequence_ConstraintInterpreterSpec(context, (ConstraintInterpreterSpec) semanticObject); 
				return; 
			case MdeoptimisePackage.EVOLVER_PARAMETER:
				sequence_EvolverParameter(context, (EvolverParameter) semanticObject); 
				return; 
			case MdeoptimisePackage.EVOLVER_SPEC:
				sequence_EvolverSpec(context, (EvolverSpec) semanticObject); 
				return; 
			case MdeoptimisePackage.META_MODEL_SPEC:
				sequence_MetaModelSpec(context, (MetaModelSpec) semanticObject); 
				return; 
			case MdeoptimisePackage.MODEL_PATH_SPEC:
				sequence_ModelPathSpec(context, (ModelPathSpec) semanticObject); 
				return; 
			case MdeoptimisePackage.OBJECTIVE_INTERPRETER_SPEC:
				sequence_ObjectiveInterpreterSpec(context, (ObjectiveInterpreterSpec) semanticObject); 
				return; 
			case MdeoptimisePackage.OPTIMISATION:
				sequence_Optimisation(context, (Optimisation) semanticObject); 
				return; 
			case MdeoptimisePackage.OPTIMISATION_SPEC:
				sequence_OptimisationSpec(context, (OptimisationSpec) semanticObject); 
				return; 
			case MdeoptimisePackage.PARAMETER_FUNCTION:
				sequence_ParameterFunction(context, (ParameterFunction) semanticObject); 
				return; 
			case MdeoptimisePackage.PROBABILITY_VARIATION:
				sequence_ProbabilityVariation(context, (ProbabilityVariation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AlgorithmVariation returns AlgorithmVariation
	 *
	 * Constraint:
	 *     (probabilityVariation=ProbabilityVariation | simpleVariation=MUTATION_VARIATION | simpleVariation=CROSSOVER_VARIATION)
	 */
	protected void sequence_AlgorithmVariation(ISerializationContext context, AlgorithmVariation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BasepathSpec returns BasepathSpec
	 *
	 * Constraint:
	 *     location=URL
	 */
	protected void sequence_BasepathSpec(ISerializationContext context, BasepathSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.BASEPATH_SPEC__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.BASEPATH_SPEC__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBasepathSpecAccess().getLocationURLTerminalRuleCall_1_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintInterpreterSpec returns ConstraintInterpreterSpec
	 *
	 * Constraint:
	 *     (constraintName=ID constraintType=ENTITY_TYPE constraintSpec=STRING)
	 */
	protected void sequence_ConstraintInterpreterSpec(ISerializationContext context, ConstraintInterpreterSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_NAME));
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_TYPE));
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_SPEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.CONSTRAINT_INTERPRETER_SPEC__CONSTRAINT_SPEC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameIDTerminalRuleCall_1_0(), semanticObject.getConstraintName());
		feeder.accept(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeENTITY_TYPETerminalRuleCall_2_0(), semanticObject.getConstraintType());
		feeder.accept(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecSTRINGTerminalRuleCall_4_0(), semanticObject.getConstraintSpec());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvolverParameter returns EvolverParameter
	 *
	 * Constraint:
	 *     (name=ID (function=ParameterFunction | customFunction=STRING))
	 */
	protected void sequence_EvolverParameter(ISerializationContext context, EvolverParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvolverSpec returns EvolverSpec
	 *
	 * Constraint:
	 *     (evolverType=EvolverType rule_location=URL unit=STRING (parameters+=EvolverParameter parameters+=EvolverParameter*)?)
	 */
	protected void sequence_EvolverSpec(ISerializationContext context, EvolverSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetaModelSpec returns MetaModelSpec
	 *
	 * Constraint:
	 *     location=URL
	 */
	protected void sequence_MetaModelSpec(ISerializationContext context, MetaModelSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.META_MODEL_SPEC__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.META_MODEL_SPEC__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetaModelSpecAccess().getLocationURLTerminalRuleCall_1_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelPathSpec returns ModelPathSpec
	 *
	 * Constraint:
	 *     location=URL
	 */
	protected void sequence_ModelPathSpec(ISerializationContext context, ModelPathSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.MODEL_PATH_SPEC__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.MODEL_PATH_SPEC__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelPathSpecAccess().getLocationURLTerminalRuleCall_1_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ObjectiveInterpreterSpec returns ObjectiveInterpreterSpec
	 *
	 * Constraint:
	 *     (objectiveName=ID objectiveTendency=OBJECTIVE_TENDENCY objectiveType=ENTITY_TYPE objectiveSpec=STRING)
	 */
	protected void sequence_ObjectiveInterpreterSpec(ISerializationContext context, ObjectiveInterpreterSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_NAME));
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_TENDENCY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_TENDENCY));
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_TYPE));
			if (transientValues.isValueTransient(semanticObject, MdeoptimisePackage.Literals.OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_SPEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdeoptimisePackage.Literals.OBJECTIVE_INTERPRETER_SPEC__OBJECTIVE_SPEC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameIDTerminalRuleCall_1_0(), semanticObject.getObjectiveName());
		feeder.accept(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyOBJECTIVE_TENDENCYTerminalRuleCall_2_0(), semanticObject.getObjectiveTendency());
		feeder.accept(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeENTITY_TYPETerminalRuleCall_3_0(), semanticObject.getObjectiveType());
		feeder.accept(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecSTRINGTerminalRuleCall_5_0(), semanticObject.getObjectiveSpec());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OptimisationSpec returns OptimisationSpec
	 *
	 * Constraint:
	 *     (
	 *         algorithmFactory=ALGORITHM_FACTORY 
	 *         algorithmName=ALGORITHM_NAME 
	 *         algorithmVariation=AlgorithmVariation 
	 *         algorithmEvolutions=INT 
	 *         algorithmPopulation=INT 
	 *         algorithmExperiments=INT?
	 *     )
	 */
	protected void sequence_OptimisationSpec(ISerializationContext context, OptimisationSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Optimisation returns Optimisation
	 *
	 * Constraint:
	 *     (
	 *         basepath=BasepathSpec 
	 *         metamodel=MetaModelSpec 
	 *         model=ModelPathSpec 
	 *         objectives+=ObjectiveInterpreterSpec+ 
	 *         constraints+=ConstraintInterpreterSpec* 
	 *         evolvers+=EvolverSpec+ 
	 *         optimisation=OptimisationSpec
	 *     )
	 */
	protected void sequence_Optimisation(ISerializationContext context, Optimisation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterFunction returns ParameterFunction
	 *
	 * Constraint:
	 *     (name=ID parameter=STRING?)
	 */
	protected void sequence_ParameterFunction(ISerializationContext context, ParameterFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProbabilityVariation returns ProbabilityVariation
	 *
	 * Constraint:
	 *     (type=GENETIC_VARIATION (crossover_rate=INT mutation_rate=INT)?)
	 */
	protected void sequence_ProbabilityVariation(ISerializationContext context, ProbabilityVariation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
