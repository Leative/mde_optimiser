/*
 * generated by Xtext 2.10.0
 */
package uk.ac.kcl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import uk.ac.kcl.ide.contentassist.antlr.internal.InternalMDEOptimiseParser;
import uk.ac.kcl.services.MDEOptimiseGrammarAccess;

public class MDEOptimiseParser extends AbstractContentAssistParser {

	@Inject
	private MDEOptimiseGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMDEOptimiseParser createParser() {
		InternalMDEOptimiseParser result = new InternalMDEOptimiseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEvolverTypeAccess().getAlternatives(), "rule__EvolverType__Alternatives");
					put(grammarAccess.getOptimisationAccess().getGroup(), "rule__Optimisation__Group__0");
					put(grammarAccess.getBasepathSpecAccess().getGroup(), "rule__BasepathSpec__Group__0");
					put(grammarAccess.getMetaModelSpecAccess().getGroup(), "rule__MetaModelSpec__Group__0");
					put(grammarAccess.getModelPathSpecAccess().getGroup(), "rule__ModelPathSpec__Group__0");
					put(grammarAccess.getObjectiveInterpreterSpecAccess().getGroup(), "rule__ObjectiveInterpreterSpec__Group__0");
					put(grammarAccess.getConstraintInterpreterSpecAccess().getGroup(), "rule__ConstraintInterpreterSpec__Group__0");
					put(grammarAccess.getEvolverSpecAccess().getGroup(), "rule__EvolverSpec__Group__0");
					put(grammarAccess.getOptimisationSpecAccess().getGroup(), "rule__OptimisationSpec__Group__0");
					put(grammarAccess.getOptimisationAccess().getBasepathAssignment_0(), "rule__Optimisation__BasepathAssignment_0");
					put(grammarAccess.getOptimisationAccess().getMetamodelAssignment_1(), "rule__Optimisation__MetamodelAssignment_1");
					put(grammarAccess.getOptimisationAccess().getModelAssignment_2(), "rule__Optimisation__ModelAssignment_2");
					put(grammarAccess.getOptimisationAccess().getObjectivesAssignment_3(), "rule__Optimisation__ObjectivesAssignment_3");
					put(grammarAccess.getOptimisationAccess().getConstraintsAssignment_4(), "rule__Optimisation__ConstraintsAssignment_4");
					put(grammarAccess.getOptimisationAccess().getEvolversAssignment_5(), "rule__Optimisation__EvolversAssignment_5");
					put(grammarAccess.getOptimisationAccess().getOptimisationAssignment_6(), "rule__Optimisation__OptimisationAssignment_6");
					put(grammarAccess.getBasepathSpecAccess().getLocationAssignment_1(), "rule__BasepathSpec__LocationAssignment_1");
					put(grammarAccess.getMetaModelSpecAccess().getLocationAssignment_1(), "rule__MetaModelSpec__LocationAssignment_1");
					put(grammarAccess.getModelPathSpecAccess().getLocationAssignment_1(), "rule__ModelPathSpec__LocationAssignment_1");
					put(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameAssignment_1(), "rule__ObjectiveInterpreterSpec__ObjectiveNameAssignment_1");
					put(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyAssignment_2(), "rule__ObjectiveInterpreterSpec__ObjectiveTendencyAssignment_2");
					put(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeAssignment_3(), "rule__ObjectiveInterpreterSpec__ObjectiveTypeAssignment_3");
					put(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecAssignment_5(), "rule__ObjectiveInterpreterSpec__ObjectiveSpecAssignment_5");
					put(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameAssignment_1(), "rule__ConstraintInterpreterSpec__ConstraintNameAssignment_1");
					put(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeAssignment_2(), "rule__ConstraintInterpreterSpec__ConstraintTypeAssignment_2");
					put(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecAssignment_4(), "rule__ConstraintInterpreterSpec__ConstraintSpecAssignment_4");
					put(grammarAccess.getEvolverSpecAccess().getEvolverTypeAssignment_0(), "rule__EvolverSpec__EvolverTypeAssignment_0");
					put(grammarAccess.getEvolverSpecAccess().getRule_locationAssignment_2(), "rule__EvolverSpec__Rule_locationAssignment_2");
					put(grammarAccess.getEvolverSpecAccess().getUnitAssignment_4(), "rule__EvolverSpec__UnitAssignment_4");
					put(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryAssignment_2(), "rule__OptimisationSpec__AlgorithmFactoryAssignment_2");
					put(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameAssignment_4(), "rule__OptimisationSpec__AlgorithmNameAssignment_4");
					put(grammarAccess.getOptimisationSpecAccess().getAlgorithmVariationAssignment_6(), "rule__OptimisationSpec__AlgorithmVariationAssignment_6");
					put(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsAssignment_8(), "rule__OptimisationSpec__AlgorithmEvolutionsAssignment_8");
					put(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationAssignment_10(), "rule__OptimisationSpec__AlgorithmPopulationAssignment_10");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMDEOptimiseParser typedParser = (InternalMDEOptimiseParser) parser;
			typedParser.entryRuleOptimisation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MDEOptimiseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MDEOptimiseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
