/*
 * generated by Xtext 2.10.0
 */
grammar InternalMDEOptimise;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.services.MDEOptimiseGrammarAccess;

}
@parser::members {
	private MDEOptimiseGrammarAccess grammarAccess;

	public void setGrammarAccess(MDEOptimiseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleOptimisation
entryRuleOptimisation
:
{ before(grammarAccess.getOptimisationRule()); }
	 ruleOptimisation
{ after(grammarAccess.getOptimisationRule()); } 
	 EOF 
;

// Rule Optimisation
ruleOptimisation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptimisationAccess().getGroup()); }
		(rule__Optimisation__Group__0)
		{ after(grammarAccess.getOptimisationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasepathSpec
entryRuleBasepathSpec
:
{ before(grammarAccess.getBasepathSpecRule()); }
	 ruleBasepathSpec
{ after(grammarAccess.getBasepathSpecRule()); } 
	 EOF 
;

// Rule BasepathSpec
ruleBasepathSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasepathSpecAccess().getGroup()); }
		(rule__BasepathSpec__Group__0)
		{ after(grammarAccess.getBasepathSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMetaModelSpec
entryRuleMetaModelSpec
:
{ before(grammarAccess.getMetaModelSpecRule()); }
	 ruleMetaModelSpec
{ after(grammarAccess.getMetaModelSpecRule()); } 
	 EOF 
;

// Rule MetaModelSpec
ruleMetaModelSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMetaModelSpecAccess().getGroup()); }
		(rule__MetaModelSpec__Group__0)
		{ after(grammarAccess.getMetaModelSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectiveInterpreterSpec
entryRuleObjectiveInterpreterSpec
:
{ before(grammarAccess.getObjectiveInterpreterSpecRule()); }
	 ruleObjectiveInterpreterSpec
{ after(grammarAccess.getObjectiveInterpreterSpecRule()); } 
	 EOF 
;

// Rule ObjectiveInterpreterSpec
ruleObjectiveInterpreterSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getGroup()); }
		(rule__ObjectiveInterpreterSpec__Group__0)
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraintInterpreterSpec
entryRuleConstraintInterpreterSpec
:
{ before(grammarAccess.getConstraintInterpreterSpecRule()); }
	 ruleConstraintInterpreterSpec
{ after(grammarAccess.getConstraintInterpreterSpecRule()); } 
	 EOF 
;

// Rule ConstraintInterpreterSpec
ruleConstraintInterpreterSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintInterpreterSpecAccess().getGroup()); }
		(rule__ConstraintInterpreterSpec__Group__0)
		{ after(grammarAccess.getConstraintInterpreterSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvolverSpec
entryRuleEvolverSpec
:
{ before(grammarAccess.getEvolverSpecRule()); }
	 ruleEvolverSpec
{ after(grammarAccess.getEvolverSpecRule()); } 
	 EOF 
;

// Rule EvolverSpec
ruleEvolverSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getGroup()); }
		(rule__EvolverSpec__Group__0)
		{ after(grammarAccess.getEvolverSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptimisationSpec
entryRuleOptimisationSpec
:
{ before(grammarAccess.getOptimisationSpecRule()); }
	 ruleOptimisationSpec
{ after(grammarAccess.getOptimisationSpecRule()); } 
	 EOF 
;

// Rule OptimisationSpec
ruleOptimisationSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getGroup()); }
		(rule__OptimisationSpec__Group__0)
		{ after(grammarAccess.getOptimisationSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__0__Impl
	rule__Optimisation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getBasepathAssignment_0()); }
	(rule__Optimisation__BasepathAssignment_0)
	{ after(grammarAccess.getOptimisationAccess().getBasepathAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__1__Impl
	rule__Optimisation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getMetamodelAssignment_1()); }
	(rule__Optimisation__MetamodelAssignment_1)
	{ after(grammarAccess.getOptimisationAccess().getMetamodelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__2__Impl
	rule__Optimisation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOptimisationAccess().getObjectivesAssignment_2()); }
		(rule__Optimisation__ObjectivesAssignment_2)
		{ after(grammarAccess.getOptimisationAccess().getObjectivesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getOptimisationAccess().getObjectivesAssignment_2()); }
		(rule__Optimisation__ObjectivesAssignment_2)*
		{ after(grammarAccess.getOptimisationAccess().getObjectivesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__3__Impl
	rule__Optimisation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getConstraintsAssignment_3()); }
	(rule__Optimisation__ConstraintsAssignment_3)*
	{ after(grammarAccess.getOptimisationAccess().getConstraintsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__4__Impl
	rule__Optimisation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOptimisationAccess().getEvolversAssignment_4()); }
		(rule__Optimisation__EvolversAssignment_4)
		{ after(grammarAccess.getOptimisationAccess().getEvolversAssignment_4()); }
	)
	(
		{ before(grammarAccess.getOptimisationAccess().getEvolversAssignment_4()); }
		(rule__Optimisation__EvolversAssignment_4)*
		{ after(grammarAccess.getOptimisationAccess().getEvolversAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getOptimisationAssignment_5()); }
	(rule__Optimisation__OptimisationAssignment_5)
	{ after(grammarAccess.getOptimisationAccess().getOptimisationAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BasepathSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasepathSpec__Group__0__Impl
	rule__BasepathSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasepathSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasepathSpecAccess().getBasepathKeyword_0()); }
	'basepath'
	{ after(grammarAccess.getBasepathSpecAccess().getBasepathKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasepathSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasepathSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasepathSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasepathSpecAccess().getLocationAssignment_1()); }
	(rule__BasepathSpec__LocationAssignment_1)
	{ after(grammarAccess.getBasepathSpecAccess().getLocationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MetaModelSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MetaModelSpec__Group__0__Impl
	rule__MetaModelSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaModelSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetaModelSpecAccess().getMetamodelKeyword_0()); }
	'metamodel'
	{ after(grammarAccess.getMetaModelSpecAccess().getMetamodelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaModelSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MetaModelSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaModelSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetaModelSpecAccess().getLocationAssignment_1()); }
	(rule__MetaModelSpec__LocationAssignment_1)
	{ after(grammarAccess.getMetaModelSpecAccess().getLocationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectiveInterpreterSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__0__Impl
	rule__ObjectiveInterpreterSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveKeyword_0()); }
	'objective'
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__1__Impl
	rule__ObjectiveInterpreterSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameAssignment_1()); }
	(rule__ObjectiveInterpreterSpec__ObjectiveNameAssignment_1)
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__2__Impl
	rule__ObjectiveInterpreterSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyAssignment_2()); }
	(rule__ObjectiveInterpreterSpec__ObjectiveTendencyAssignment_2)
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__3__Impl
	rule__ObjectiveInterpreterSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeAssignment_3()); }
	(rule__ObjectiveInterpreterSpec__ObjectiveTypeAssignment_3)
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__4__Impl
	rule__ObjectiveInterpreterSpec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__5__Impl
	rule__ObjectiveInterpreterSpec__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecAssignment_5()); }
	(rule__ObjectiveInterpreterSpec__ObjectiveSpecAssignment_5)
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintInterpreterSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__0__Impl
	rule__ConstraintInterpreterSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintKeyword_0()); }
	'constraint'
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__1__Impl
	rule__ConstraintInterpreterSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameAssignment_1()); }
	(rule__ConstraintInterpreterSpec__ConstraintNameAssignment_1)
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__2__Impl
	rule__ConstraintInterpreterSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeAssignment_2()); }
	(rule__ConstraintInterpreterSpec__ConstraintTypeAssignment_2)
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__3__Impl
	rule__ConstraintInterpreterSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__4__Impl
	rule__ConstraintInterpreterSpec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecAssignment_4()); }
	(rule__ConstraintInterpreterSpec__ConstraintSpecAssignment_4)
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolverSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__0__Impl
	rule__EvolverSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getEvolveKeyword_0()); }
	'evolve'
	{ after(grammarAccess.getEvolverSpecAccess().getEvolveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__1__Impl
	rule__EvolverSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getUsingKeyword_1()); }
	'using'
	{ after(grammarAccess.getEvolverSpecAccess().getUsingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__2__Impl
	rule__EvolverSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getRule_locationAssignment_2()); }
	(rule__EvolverSpec__Rule_locationAssignment_2)
	{ after(grammarAccess.getEvolverSpecAccess().getRule_locationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__3__Impl
	rule__EvolverSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getUnitKeyword_3()); }
	'unit'
	{ after(grammarAccess.getEvolverSpecAccess().getUnitKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getUnitAssignment_4()); }
	(rule__EvolverSpec__UnitAssignment_4)
	{ after(grammarAccess.getEvolverSpecAccess().getUnitAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptimisationSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__0__Impl
	rule__OptimisationSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getOptimisationKeyword_0()); }
	'optimisation'
	{ after(grammarAccess.getOptimisationSpecAccess().getOptimisationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__1__Impl
	rule__OptimisationSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getProviderKeyword_1()); }
	'provider'
	{ after(grammarAccess.getOptimisationSpecAccess().getProviderKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__2__Impl
	rule__OptimisationSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryAssignment_2()); }
	(rule__OptimisationSpec__AlgorithmFactoryAssignment_2)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__3__Impl
	rule__OptimisationSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmKeyword_3()); }
	'algorithm'
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__4__Impl
	rule__OptimisationSpec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameAssignment_4()); }
	(rule__OptimisationSpec__AlgorithmNameAssignment_4)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__5__Impl
	rule__OptimisationSpec__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getEvolutionsKeyword_5()); }
	'evolutions'
	{ after(grammarAccess.getOptimisationSpecAccess().getEvolutionsKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__6__Impl
	rule__OptimisationSpec__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsAssignment_6()); }
	(rule__OptimisationSpec__AlgorithmEvolutionsAssignment_6)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__7__Impl
	rule__OptimisationSpec__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getPopulationKeyword_7()); }
	'population'
	{ after(grammarAccess.getOptimisationSpecAccess().getPopulationKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationAssignment_8()); }
	(rule__OptimisationSpec__AlgorithmPopulationAssignment_8)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Optimisation__BasepathAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getBasepathBasepathSpecParserRuleCall_0_0()); }
		ruleBasepathSpec
		{ after(grammarAccess.getOptimisationAccess().getBasepathBasepathSpecParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__MetamodelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getMetamodelMetaModelSpecParserRuleCall_1_0()); }
		ruleMetaModelSpec
		{ after(grammarAccess.getOptimisationAccess().getMetamodelMetaModelSpecParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__ObjectivesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getObjectivesObjectiveInterpreterSpecParserRuleCall_2_0()); }
		ruleObjectiveInterpreterSpec
		{ after(grammarAccess.getOptimisationAccess().getObjectivesObjectiveInterpreterSpecParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__ConstraintsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getConstraintsConstraintInterpreterSpecParserRuleCall_3_0()); }
		ruleConstraintInterpreterSpec
		{ after(grammarAccess.getOptimisationAccess().getConstraintsConstraintInterpreterSpecParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__EvolversAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getEvolversEvolverSpecParserRuleCall_4_0()); }
		ruleEvolverSpec
		{ after(grammarAccess.getOptimisationAccess().getEvolversEvolverSpecParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__OptimisationAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getOptimisationOptimisationSpecParserRuleCall_5_0()); }
		ruleOptimisationSpec
		{ after(grammarAccess.getOptimisationAccess().getOptimisationOptimisationSpecParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasepathSpec__LocationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasepathSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
		RULE_URL
		{ after(grammarAccess.getBasepathSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaModelSpec__LocationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetaModelSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
		RULE_URL
		{ after(grammarAccess.getMetaModelSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__ObjectiveNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameENTITY_NAMETerminalRuleCall_1_0()); }
		RULE_ENTITY_NAME
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameENTITY_NAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__ObjectiveTendencyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyOBJECTIVE_TENDENCYTerminalRuleCall_2_0()); }
		RULE_OBJECTIVE_TENDENCY
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyOBJECTIVE_TENDENCYTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__ObjectiveTypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeENTITY_TYPETerminalRuleCall_3_0()); }
		RULE_ENTITY_TYPE
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeENTITY_TYPETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__ObjectiveSpecAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__ConstraintNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameENTITY_NAMETerminalRuleCall_1_0()); }
		RULE_ENTITY_NAME
		{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameENTITY_NAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__ConstraintTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeENTITY_TYPETerminalRuleCall_2_0()); }
		RULE_ENTITY_TYPE
		{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeENTITY_TYPETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__ConstraintSpecAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Rule_locationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getRule_locationURLTerminalRuleCall_2_0()); }
		RULE_URL
		{ after(grammarAccess.getEvolverSpecAccess().getRule_locationURLTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__UnitAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getUnitSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getEvolverSpecAccess().getUnitSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmFactoryAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryALGORITHM_FACTORYTerminalRuleCall_2_0()); }
		RULE_ALGORITHM_FACTORY
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryALGORITHM_FACTORYTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameALGORITHM_NAMETerminalRuleCall_4_0()); }
		RULE_ALGORITHM_NAME
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameALGORITHM_NAMETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmEvolutionsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsINTTerminalRuleCall_6_0()); }
		RULE_INT
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsINTTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmPopulationAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationINTTerminalRuleCall_8_0()); }
		RULE_INT
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationINTTerminalRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ALGORITHM_FACTORY : ('moea'|'ecj');

RULE_ALGORITHM_NAME : ('eMOEA'|'eNSGAII'|'NSGAII'|'NSGAIII'|'SPEA2');

RULE_URL : '<' ( options {greedy=false;} : . )*'>';

RULE_OBJECTIVE_TENDENCY : ('minimise'|'maximise');

RULE_ENTITY_TYPE : ('java'|'ocl');

RULE_ENTITY_NAME : ('a'..'z'|'A'..'Z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
