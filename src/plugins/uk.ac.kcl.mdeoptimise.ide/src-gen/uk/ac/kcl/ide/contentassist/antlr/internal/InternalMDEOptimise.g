/*
 * generated by Xtext 2.10.0
 */
grammar InternalMDEOptimise;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.services.MDEOptimiseGrammarAccess;

}
@parser::members {
	private MDEOptimiseGrammarAccess grammarAccess;

	public void setGrammarAccess(MDEOptimiseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleOptimisation
entryRuleOptimisation
:
{ before(grammarAccess.getOptimisationRule()); }
	 ruleOptimisation
{ after(grammarAccess.getOptimisationRule()); } 
	 EOF 
;

// Rule Optimisation
ruleOptimisation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptimisationAccess().getGroup()); }
		(rule__Optimisation__Group__0)
		{ after(grammarAccess.getOptimisationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasepathSpec
entryRuleBasepathSpec
:
{ before(grammarAccess.getBasepathSpecRule()); }
	 ruleBasepathSpec
{ after(grammarAccess.getBasepathSpecRule()); } 
	 EOF 
;

// Rule BasepathSpec
ruleBasepathSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasepathSpecAccess().getGroup()); }
		(rule__BasepathSpec__Group__0)
		{ after(grammarAccess.getBasepathSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMetaModelSpec
entryRuleMetaModelSpec
:
{ before(grammarAccess.getMetaModelSpecRule()); }
	 ruleMetaModelSpec
{ after(grammarAccess.getMetaModelSpecRule()); } 
	 EOF 
;

// Rule MetaModelSpec
ruleMetaModelSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMetaModelSpecAccess().getGroup()); }
		(rule__MetaModelSpec__Group__0)
		{ after(grammarAccess.getMetaModelSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModelPathSpec
entryRuleModelPathSpec
:
{ before(grammarAccess.getModelPathSpecRule()); }
	 ruleModelPathSpec
{ after(grammarAccess.getModelPathSpecRule()); } 
	 EOF 
;

// Rule ModelPathSpec
ruleModelPathSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelPathSpecAccess().getGroup()); }
		(rule__ModelPathSpec__Group__0)
		{ after(grammarAccess.getModelPathSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectiveInterpreterSpec
entryRuleObjectiveInterpreterSpec
:
{ before(grammarAccess.getObjectiveInterpreterSpecRule()); }
	 ruleObjectiveInterpreterSpec
{ after(grammarAccess.getObjectiveInterpreterSpecRule()); } 
	 EOF 
;

// Rule ObjectiveInterpreterSpec
ruleObjectiveInterpreterSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getGroup()); }
		(rule__ObjectiveInterpreterSpec__Group__0)
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraintInterpreterSpec
entryRuleConstraintInterpreterSpec
:
{ before(grammarAccess.getConstraintInterpreterSpecRule()); }
	 ruleConstraintInterpreterSpec
{ after(grammarAccess.getConstraintInterpreterSpecRule()); } 
	 EOF 
;

// Rule ConstraintInterpreterSpec
ruleConstraintInterpreterSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintInterpreterSpecAccess().getGroup()); }
		(rule__ConstraintInterpreterSpec__Group__0)
		{ after(grammarAccess.getConstraintInterpreterSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvolverSpec
entryRuleEvolverSpec
:
{ before(grammarAccess.getEvolverSpecRule()); }
	 ruleEvolverSpec
{ after(grammarAccess.getEvolverSpecRule()); } 
	 EOF 
;

// Rule EvolverSpec
ruleEvolverSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getGroup()); }
		(rule__EvolverSpec__Group__0)
		{ after(grammarAccess.getEvolverSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvolverParameter
entryRuleEvolverParameter
:
{ before(grammarAccess.getEvolverParameterRule()); }
	 ruleEvolverParameter
{ after(grammarAccess.getEvolverParameterRule()); } 
	 EOF 
;

// Rule EvolverParameter
ruleEvolverParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvolverParameterAccess().getGroup()); }
		(rule__EvolverParameter__Group__0)
		{ after(grammarAccess.getEvolverParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterFunction
entryRuleParameterFunction
:
{ before(grammarAccess.getParameterFunctionRule()); }
	 ruleParameterFunction
{ after(grammarAccess.getParameterFunctionRule()); } 
	 EOF 
;

// Rule ParameterFunction
ruleParameterFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterFunctionAccess().getGroup()); }
		(rule__ParameterFunction__Group__0)
		{ after(grammarAccess.getParameterFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptimisationSpec
entryRuleOptimisationSpec
:
{ before(grammarAccess.getOptimisationSpecRule()); }
	 ruleOptimisationSpec
{ after(grammarAccess.getOptimisationSpecRule()); } 
	 EOF 
;

// Rule OptimisationSpec
ruleOptimisationSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getGroup()); }
		(rule__OptimisationSpec__Group__0)
		{ after(grammarAccess.getOptimisationSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgorithmVariation
entryRuleAlgorithmVariation
:
{ before(grammarAccess.getAlgorithmVariationRule()); }
	 ruleAlgorithmVariation
{ after(grammarAccess.getAlgorithmVariationRule()); } 
	 EOF 
;

// Rule AlgorithmVariation
ruleAlgorithmVariation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgorithmVariationAccess().getAlternatives()); }
		(rule__AlgorithmVariation__Alternatives)
		{ after(grammarAccess.getAlgorithmVariationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProbabilityVariation
entryRuleProbabilityVariation
:
{ before(grammarAccess.getProbabilityVariationRule()); }
	 ruleProbabilityVariation
{ after(grammarAccess.getProbabilityVariationRule()); } 
	 EOF 
;

// Rule ProbabilityVariation
ruleProbabilityVariation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProbabilityVariationAccess().getGroup()); }
		(rule__ProbabilityVariation__Group__0)
		{ after(grammarAccess.getProbabilityVariationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EvolverType
ruleEvolverType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverTypeAccess().getAlternatives()); }
		(rule__EvolverType__Alternatives)
		{ after(grammarAccess.getEvolverTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverParameterAccess().getFunctionAssignment_1_1_0()); }
		(rule__EvolverParameter__FunctionAssignment_1_1_0)
		{ after(grammarAccess.getEvolverParameterAccess().getFunctionAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getEvolverParameterAccess().getCustomFunctionAssignment_1_1_1()); }
		(rule__EvolverParameter__CustomFunctionAssignment_1_1_1)
		{ after(grammarAccess.getEvolverParameterAccess().getCustomFunctionAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmVariation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmVariationAccess().getProbabilityVariationAssignment_0()); }
		(rule__AlgorithmVariation__ProbabilityVariationAssignment_0)
		{ after(grammarAccess.getAlgorithmVariationAccess().getProbabilityVariationAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmVariationAccess().getSimpleVariationAssignment_1()); }
		(rule__AlgorithmVariation__SimpleVariationAssignment_1)
		{ after(grammarAccess.getAlgorithmVariationAccess().getSimpleVariationAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmVariation__SimpleVariationAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmVariationAccess().getSimpleVariationMUTATION_VARIATIONTerminalRuleCall_1_0_0()); }
		RULE_MUTATION_VARIATION
		{ after(grammarAccess.getAlgorithmVariationAccess().getSimpleVariationMUTATION_VARIATIONTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmVariationAccess().getSimpleVariationCROSSOVER_VARIATIONTerminalRuleCall_1_0_1()); }
		RULE_CROSSOVER_VARIATION
		{ after(grammarAccess.getAlgorithmVariationAccess().getSimpleVariationCROSSOVER_VARIATIONTerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverTypeAccess().getMUTATEEnumLiteralDeclaration_0()); }
		('mutate')
		{ after(grammarAccess.getEvolverTypeAccess().getMUTATEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEvolverTypeAccess().getBREEDEnumLiteralDeclaration_1()); }
		('breed')
		{ after(grammarAccess.getEvolverTypeAccess().getBREEDEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__0__Impl
	rule__Optimisation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getBasepathAssignment_0()); }
	(rule__Optimisation__BasepathAssignment_0)
	{ after(grammarAccess.getOptimisationAccess().getBasepathAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__1__Impl
	rule__Optimisation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getMetamodelAssignment_1()); }
	(rule__Optimisation__MetamodelAssignment_1)
	{ after(grammarAccess.getOptimisationAccess().getMetamodelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__2__Impl
	rule__Optimisation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getModelAssignment_2()); }
	(rule__Optimisation__ModelAssignment_2)
	{ after(grammarAccess.getOptimisationAccess().getModelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__3__Impl
	rule__Optimisation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOptimisationAccess().getObjectivesAssignment_3()); }
		(rule__Optimisation__ObjectivesAssignment_3)
		{ after(grammarAccess.getOptimisationAccess().getObjectivesAssignment_3()); }
	)
	(
		{ before(grammarAccess.getOptimisationAccess().getObjectivesAssignment_3()); }
		(rule__Optimisation__ObjectivesAssignment_3)*
		{ after(grammarAccess.getOptimisationAccess().getObjectivesAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__4__Impl
	rule__Optimisation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getConstraintsAssignment_4()); }
	(rule__Optimisation__ConstraintsAssignment_4)*
	{ after(grammarAccess.getOptimisationAccess().getConstraintsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__5__Impl
	rule__Optimisation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOptimisationAccess().getEvolversAssignment_5()); }
		(rule__Optimisation__EvolversAssignment_5)
		{ after(grammarAccess.getOptimisationAccess().getEvolversAssignment_5()); }
	)
	(
		{ before(grammarAccess.getOptimisationAccess().getEvolversAssignment_5()); }
		(rule__Optimisation__EvolversAssignment_5)*
		{ after(grammarAccess.getOptimisationAccess().getEvolversAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optimisation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationAccess().getOptimisationAssignment_6()); }
	(rule__Optimisation__OptimisationAssignment_6)
	{ after(grammarAccess.getOptimisationAccess().getOptimisationAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BasepathSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasepathSpec__Group__0__Impl
	rule__BasepathSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasepathSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasepathSpecAccess().getBasepathKeyword_0()); }
	'basepath'
	{ after(grammarAccess.getBasepathSpecAccess().getBasepathKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasepathSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasepathSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasepathSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasepathSpecAccess().getLocationAssignment_1()); }
	(rule__BasepathSpec__LocationAssignment_1)
	{ after(grammarAccess.getBasepathSpecAccess().getLocationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MetaModelSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MetaModelSpec__Group__0__Impl
	rule__MetaModelSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaModelSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetaModelSpecAccess().getMetamodelKeyword_0()); }
	'metamodel'
	{ after(grammarAccess.getMetaModelSpecAccess().getMetamodelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaModelSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MetaModelSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaModelSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetaModelSpecAccess().getLocationAssignment_1()); }
	(rule__MetaModelSpec__LocationAssignment_1)
	{ after(grammarAccess.getMetaModelSpecAccess().getLocationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModelPathSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelPathSpec__Group__0__Impl
	rule__ModelPathSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelPathSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelPathSpecAccess().getModelKeyword_0()); }
	'model'
	{ after(grammarAccess.getModelPathSpecAccess().getModelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelPathSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelPathSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelPathSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelPathSpecAccess().getLocationAssignment_1()); }
	(rule__ModelPathSpec__LocationAssignment_1)
	{ after(grammarAccess.getModelPathSpecAccess().getLocationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectiveInterpreterSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__0__Impl
	rule__ObjectiveInterpreterSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveKeyword_0()); }
	'objective'
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__1__Impl
	rule__ObjectiveInterpreterSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameAssignment_1()); }
	(rule__ObjectiveInterpreterSpec__ObjectiveNameAssignment_1)
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__2__Impl
	rule__ObjectiveInterpreterSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyAssignment_2()); }
	(rule__ObjectiveInterpreterSpec__ObjectiveTendencyAssignment_2)
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__3__Impl
	rule__ObjectiveInterpreterSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeAssignment_3()); }
	(rule__ObjectiveInterpreterSpec__ObjectiveTypeAssignment_3)
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__4__Impl
	rule__ObjectiveInterpreterSpec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__5__Impl
	rule__ObjectiveInterpreterSpec__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecAssignment_5()); }
	(rule__ObjectiveInterpreterSpec__ObjectiveSpecAssignment_5)
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectiveInterpreterSpec__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintInterpreterSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__0__Impl
	rule__ConstraintInterpreterSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintKeyword_0()); }
	'constraint'
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__1__Impl
	rule__ConstraintInterpreterSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameAssignment_1()); }
	(rule__ConstraintInterpreterSpec__ConstraintNameAssignment_1)
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__2__Impl
	rule__ConstraintInterpreterSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeAssignment_2()); }
	(rule__ConstraintInterpreterSpec__ConstraintTypeAssignment_2)
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__3__Impl
	rule__ConstraintInterpreterSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__4__Impl
	rule__ConstraintInterpreterSpec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecAssignment_4()); }
	(rule__ConstraintInterpreterSpec__ConstraintSpecAssignment_4)
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintInterpreterSpec__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintInterpreterSpecAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getConstraintInterpreterSpecAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolverSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__0__Impl
	rule__EvolverSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getEvolverTypeAssignment_0()); }
	(rule__EvolverSpec__EvolverTypeAssignment_0)
	{ after(grammarAccess.getEvolverSpecAccess().getEvolverTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__1__Impl
	rule__EvolverSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getUsingKeyword_1()); }
	'using'
	{ after(grammarAccess.getEvolverSpecAccess().getUsingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__2__Impl
	rule__EvolverSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getRule_locationAssignment_2()); }
	(rule__EvolverSpec__Rule_locationAssignment_2)
	{ after(grammarAccess.getEvolverSpecAccess().getRule_locationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__3__Impl
	rule__EvolverSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getUnitKeyword_3()); }
	'unit'
	{ after(grammarAccess.getEvolverSpecAccess().getUnitKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__4__Impl
	rule__EvolverSpec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getUnitAssignment_4()); }
	(rule__EvolverSpec__UnitAssignment_4)
	{ after(grammarAccess.getEvolverSpecAccess().getUnitAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getGroup_5()); }
	(rule__EvolverSpec__Group_5__0)?
	{ after(grammarAccess.getEvolverSpecAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolverSpec__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group_5__0__Impl
	rule__EvolverSpec__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getParametersKeyword_5_0()); }
	'parameters'
	{ after(grammarAccess.getEvolverSpecAccess().getParametersKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group_5__1__Impl
	rule__EvolverSpec__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getLeftCurlyBracketKeyword_5_1()); }
	'{'
	{ after(grammarAccess.getEvolverSpecAccess().getLeftCurlyBracketKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group_5__2__Impl
	rule__EvolverSpec__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getParametersAssignment_5_2()); }
	(rule__EvolverSpec__ParametersAssignment_5_2)
	{ after(grammarAccess.getEvolverSpecAccess().getParametersAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group_5__3__Impl
	rule__EvolverSpec__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getGroup_5_3()); }
	(rule__EvolverSpec__Group_5_3__0)*
	{ after(grammarAccess.getEvolverSpecAccess().getGroup_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getRightCurlyBracketKeyword_5_4()); }
	'}'
	{ after(grammarAccess.getEvolverSpecAccess().getRightCurlyBracketKeyword_5_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolverSpec__Group_5_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group_5_3__0__Impl
	rule__EvolverSpec__Group_5_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getCommaKeyword_5_3_0()); }
	','
	{ after(grammarAccess.getEvolverSpecAccess().getCommaKeyword_5_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverSpec__Group_5_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Group_5_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverSpecAccess().getParametersAssignment_5_3_1()); }
	(rule__EvolverSpec__ParametersAssignment_5_3_1)
	{ after(grammarAccess.getEvolverSpecAccess().getParametersAssignment_5_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolverParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverParameter__Group__0__Impl
	rule__EvolverParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverParameterAccess().getNameAssignment_0()); }
	(rule__EvolverParameter__NameAssignment_0)
	{ after(grammarAccess.getEvolverParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverParameterAccess().getGroup_1()); }
	(rule__EvolverParameter__Group_1__0)
	{ after(grammarAccess.getEvolverParameterAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolverParameter__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverParameter__Group_1__0__Impl
	rule__EvolverParameter__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverParameterAccess().getEqualsSignGreaterThanSignKeyword_1_0()); }
	'=>'
	{ after(grammarAccess.getEvolverParameterAccess().getEqualsSignGreaterThanSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolverParameter__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolverParameterAccess().getAlternatives_1_1()); }
	(rule__EvolverParameter__Alternatives_1_1)
	{ after(grammarAccess.getEvolverParameterAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterFunction__Group__0__Impl
	rule__ParameterFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterFunctionAccess().getNameAssignment_0()); }
	(rule__ParameterFunction__NameAssignment_0)
	{ after(grammarAccess.getParameterFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterFunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterFunctionAccess().getGroup_1()); }
	(rule__ParameterFunction__Group_1__0)?
	{ after(grammarAccess.getParameterFunctionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterFunction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterFunction__Group_1__0__Impl
	rule__ParameterFunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterFunctionAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getParameterFunctionAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterFunction__Group_1__1__Impl
	rule__ParameterFunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterFunctionAccess().getParameterAssignment_1_1()); }
	(rule__ParameterFunction__ParameterAssignment_1_1)
	{ after(grammarAccess.getParameterFunctionAccess().getParameterAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterFunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterFunctionAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getParameterFunctionAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptimisationSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__0__Impl
	rule__OptimisationSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getOptimisationKeyword_0()); }
	'optimisation'
	{ after(grammarAccess.getOptimisationSpecAccess().getOptimisationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__1__Impl
	rule__OptimisationSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getProviderKeyword_1()); }
	'provider'
	{ after(grammarAccess.getOptimisationSpecAccess().getProviderKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__2__Impl
	rule__OptimisationSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryAssignment_2()); }
	(rule__OptimisationSpec__AlgorithmFactoryAssignment_2)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__3__Impl
	rule__OptimisationSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmKeyword_3()); }
	'algorithm'
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__4__Impl
	rule__OptimisationSpec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameAssignment_4()); }
	(rule__OptimisationSpec__AlgorithmNameAssignment_4)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__5__Impl
	rule__OptimisationSpec__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getVariationKeyword_5()); }
	'variation'
	{ after(grammarAccess.getOptimisationSpecAccess().getVariationKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__6__Impl
	rule__OptimisationSpec__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmVariationAssignment_6()); }
	(rule__OptimisationSpec__AlgorithmVariationAssignment_6)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmVariationAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__7__Impl
	rule__OptimisationSpec__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getEvolutionsKeyword_7()); }
	'evolutions'
	{ after(grammarAccess.getOptimisationSpecAccess().getEvolutionsKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__8__Impl
	rule__OptimisationSpec__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsAssignment_8()); }
	(rule__OptimisationSpec__AlgorithmEvolutionsAssignment_8)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__9__Impl
	rule__OptimisationSpec__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getPopulationKeyword_9()); }
	'population'
	{ after(grammarAccess.getOptimisationSpecAccess().getPopulationKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__10__Impl
	rule__OptimisationSpec__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationAssignment_10()); }
	(rule__OptimisationSpec__AlgorithmPopulationAssignment_10)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getGroup_11()); }
	(rule__OptimisationSpec__Group_11__0)?
	{ after(grammarAccess.getOptimisationSpecAccess().getGroup_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptimisationSpec__Group_11__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group_11__0__Impl
	rule__OptimisationSpec__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group_11__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getExperimentsKeyword_11_0()); }
	'experiments'
	{ after(grammarAccess.getOptimisationSpecAccess().getExperimentsKeyword_11_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group_11__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptimisationSpec__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__Group_11__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmExperimentsAssignment_11_1()); }
	(rule__OptimisationSpec__AlgorithmExperimentsAssignment_11_1)
	{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmExperimentsAssignment_11_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityVariation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProbabilityVariation__Group__0__Impl
	rule__ProbabilityVariation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProbabilityVariationAccess().getTypeAssignment_0()); }
	(rule__ProbabilityVariation__TypeAssignment_0)
	{ after(grammarAccess.getProbabilityVariationAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProbabilityVariation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProbabilityVariationAccess().getGroup_1()); }
	(rule__ProbabilityVariation__Group_1__0)?
	{ after(grammarAccess.getProbabilityVariationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProbabilityVariation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProbabilityVariation__Group_1__0__Impl
	rule__ProbabilityVariation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProbabilityVariationAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getProbabilityVariationAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProbabilityVariation__Group_1__1__Impl
	rule__ProbabilityVariation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProbabilityVariationAccess().getCrossover_rateAssignment_1_1()); }
	(rule__ProbabilityVariation__Crossover_rateAssignment_1_1)
	{ after(grammarAccess.getProbabilityVariationAccess().getCrossover_rateAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProbabilityVariation__Group_1__2__Impl
	rule__ProbabilityVariation__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProbabilityVariationAccess().getCommaKeyword_1_2()); }
	','
	{ after(grammarAccess.getProbabilityVariationAccess().getCommaKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProbabilityVariation__Group_1__3__Impl
	rule__ProbabilityVariation__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProbabilityVariationAccess().getMutation_rateAssignment_1_3()); }
	(rule__ProbabilityVariation__Mutation_rateAssignment_1_3)
	{ after(grammarAccess.getProbabilityVariationAccess().getMutation_rateAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProbabilityVariation__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProbabilityVariationAccess().getRightParenthesisKeyword_1_4()); }
	')'
	{ after(grammarAccess.getProbabilityVariationAccess().getRightParenthesisKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Optimisation__BasepathAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getBasepathBasepathSpecParserRuleCall_0_0()); }
		ruleBasepathSpec
		{ after(grammarAccess.getOptimisationAccess().getBasepathBasepathSpecParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__MetamodelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getMetamodelMetaModelSpecParserRuleCall_1_0()); }
		ruleMetaModelSpec
		{ after(grammarAccess.getOptimisationAccess().getMetamodelMetaModelSpecParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__ModelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getModelModelPathSpecParserRuleCall_2_0()); }
		ruleModelPathSpec
		{ after(grammarAccess.getOptimisationAccess().getModelModelPathSpecParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__ObjectivesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getObjectivesObjectiveInterpreterSpecParserRuleCall_3_0()); }
		ruleObjectiveInterpreterSpec
		{ after(grammarAccess.getOptimisationAccess().getObjectivesObjectiveInterpreterSpecParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__ConstraintsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getConstraintsConstraintInterpreterSpecParserRuleCall_4_0()); }
		ruleConstraintInterpreterSpec
		{ after(grammarAccess.getOptimisationAccess().getConstraintsConstraintInterpreterSpecParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__EvolversAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getEvolversEvolverSpecParserRuleCall_5_0()); }
		ruleEvolverSpec
		{ after(grammarAccess.getOptimisationAccess().getEvolversEvolverSpecParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optimisation__OptimisationAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationAccess().getOptimisationOptimisationSpecParserRuleCall_6_0()); }
		ruleOptimisationSpec
		{ after(grammarAccess.getOptimisationAccess().getOptimisationOptimisationSpecParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasepathSpec__LocationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasepathSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
		RULE_URL
		{ after(grammarAccess.getBasepathSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaModelSpec__LocationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetaModelSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
		RULE_URL
		{ after(grammarAccess.getMetaModelSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelPathSpec__LocationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelPathSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
		RULE_URL
		{ after(grammarAccess.getModelPathSpecAccess().getLocationURLTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__ObjectiveNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__ObjectiveTendencyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyOBJECTIVE_TENDENCYTerminalRuleCall_2_0()); }
		RULE_OBJECTIVE_TENDENCY
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTendencyOBJECTIVE_TENDENCYTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__ObjectiveTypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeENTITY_TYPETerminalRuleCall_3_0()); }
		RULE_ENTITY_TYPE
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveTypeENTITY_TYPETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveInterpreterSpec__ObjectiveSpecAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getObjectiveInterpreterSpecAccess().getObjectiveSpecSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__ConstraintNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__ConstraintTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeENTITY_TYPETerminalRuleCall_2_0()); }
		RULE_ENTITY_TYPE
		{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintTypeENTITY_TYPETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintInterpreterSpec__ConstraintSpecAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getConstraintInterpreterSpecAccess().getConstraintSpecSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__EvolverTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getEvolverTypeEvolverTypeEnumRuleCall_0_0()); }
		ruleEvolverType
		{ after(grammarAccess.getEvolverSpecAccess().getEvolverTypeEvolverTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__Rule_locationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getRule_locationURLTerminalRuleCall_2_0()); }
		RULE_URL
		{ after(grammarAccess.getEvolverSpecAccess().getRule_locationURLTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__UnitAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getUnitSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getEvolverSpecAccess().getUnitSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__ParametersAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getParametersEvolverParameterParserRuleCall_5_2_0()); }
		ruleEvolverParameter
		{ after(grammarAccess.getEvolverSpecAccess().getParametersEvolverParameterParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverSpec__ParametersAssignment_5_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverSpecAccess().getParametersEvolverParameterParserRuleCall_5_3_1_0()); }
		ruleEvolverParameter
		{ after(grammarAccess.getEvolverSpecAccess().getParametersEvolverParameterParserRuleCall_5_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverParameterAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEvolverParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__FunctionAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverParameterAccess().getFunctionParameterFunctionParserRuleCall_1_1_0_0()); }
		ruleParameterFunction
		{ after(grammarAccess.getEvolverParameterAccess().getFunctionParameterFunctionParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolverParameter__CustomFunctionAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolverParameterAccess().getCustomFunctionSTRINGTerminalRuleCall_1_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getEvolverParameterAccess().getCustomFunctionSTRINGTerminalRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterFunction__ParameterAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterFunctionAccess().getParameterSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getParameterFunctionAccess().getParameterSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmFactoryAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryALGORITHM_FACTORYTerminalRuleCall_2_0()); }
		RULE_ALGORITHM_FACTORY
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmFactoryALGORITHM_FACTORYTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmNameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameALGORITHM_NAMETerminalRuleCall_4_0()); }
		RULE_ALGORITHM_NAME
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmNameALGORITHM_NAMETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmVariationAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmVariationAlgorithmVariationParserRuleCall_6_0()); }
		ruleAlgorithmVariation
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmVariationAlgorithmVariationParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmEvolutionsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsINTTerminalRuleCall_8_0()); }
		RULE_INT
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmEvolutionsINTTerminalRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmPopulationAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationINTTerminalRuleCall_10_0()); }
		RULE_INT
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmPopulationINTTerminalRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptimisationSpec__AlgorithmExperimentsAssignment_11_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptimisationSpecAccess().getAlgorithmExperimentsINTTerminalRuleCall_11_1_0()); }
		RULE_INT
		{ after(grammarAccess.getOptimisationSpecAccess().getAlgorithmExperimentsINTTerminalRuleCall_11_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmVariation__ProbabilityVariationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmVariationAccess().getProbabilityVariationProbabilityVariationParserRuleCall_0_0()); }
		ruleProbabilityVariation
		{ after(grammarAccess.getAlgorithmVariationAccess().getProbabilityVariationProbabilityVariationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmVariation__SimpleVariationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmVariationAccess().getSimpleVariationAlternatives_1_0()); }
		(rule__AlgorithmVariation__SimpleVariationAlternatives_1_0)
		{ after(grammarAccess.getAlgorithmVariationAccess().getSimpleVariationAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProbabilityVariationAccess().getTypeGENETIC_VARIATIONTerminalRuleCall_0_0()); }
		RULE_GENETIC_VARIATION
		{ after(grammarAccess.getProbabilityVariationAccess().getTypeGENETIC_VARIATIONTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Crossover_rateAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProbabilityVariationAccess().getCrossover_rateINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getProbabilityVariationAccess().getCrossover_rateINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProbabilityVariation__Mutation_rateAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProbabilityVariationAccess().getMutation_rateINTTerminalRuleCall_1_3_0()); }
		RULE_INT
		{ after(grammarAccess.getProbabilityVariationAccess().getMutation_rateINTTerminalRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_GENETIC_VARIATION : 'genetic';

RULE_CROSSOVER_VARIATION : 'crossover';

RULE_MUTATION_VARIATION : 'mutation';

RULE_ALGORITHM_FACTORY : ('moea'|'ecj');

RULE_ALGORITHM_NAME : ('eMOEA'|'eNSGAII'|'NSGAII'|'NSGAIII'|'SPEA2');

RULE_URL : '<' ( options {greedy=false;} : . )*'>';

RULE_OBJECTIVE_TENDENCY : ('minimise'|'maximise');

RULE_ENTITY_TYPE : ('java'|'ocl');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
